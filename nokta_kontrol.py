# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NoktaKontrol
                                 A QGIS plugin
 60 cm den yakın noktaları bulma
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by aylin.torun
        email                : aylin.torun@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Initialize Qt resources from file resources.py

# Import the code for the dialog
from PyQt5 import QtWidgets
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.core import *
from qgis.core import QgsProject
from PyQt5.QtGui import *
from PyQt5.QtCore import QVariant
import math
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nokta_kontrol_dialog import NoktaKontrolDialog
import os.path
import processing
from PyQt5.QtWidgets import QMenu

class NoktaKontrol:
    """QGIS Plugin Implementation."""
    
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NoktaKontrol_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = NoktaKontrolDialog()
        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CBS Yakın Nokta Kontrolu')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'NoktaKontrol')
        self.toolbar.setObjectName(u'NoktaKontrol')
        for alg in QgsApplication.processingRegistry().algorithms(): print(alg.id())
       # layers=[]
        
      
        


    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NoktaKontrol', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)
   
  
        
        
        
        
        
        
        # Menu ekle
        
        #self.menuu = self.iface.mainWindow().findChild( QMenu, '&BASKİ CBS' )

        # If the menu does not exist, create it!
        #if not self.menuu:
         #   self.menuu = QMenu( '&BASKİ CBS', self.iface.mainWindow().menuBar() )
         #   self.menuu.setObjectName( '&BASKİ CBS' )
         #   actions = self.iface.mainWindow().menuBar().actions()
         #   lastAction = actions[-1]
         #   self.iface.mainWindow().menuBar().insertMenu( lastAction, self.menuu )
           
        #  Altmenu ekle
         #   self.action = QAction(QIcon(':/plugins/nokta_kontrol/nokta.png'),"60 cm Kontrolü", self.iface.mainWindow())
         #   self.action.triggered.connect(self.run)
         #   self.menuu.addAction(self.action)
       
        

        
        
        
        self.actions.append(action)
        return action
     
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        icon_path = ':/plugins/nokta_kontrol/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CBS Yakın Nokta Kontrol '),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # Menu ekle
        
        self.menuu = self.iface.mainWindow().findChild( QMenu, '&BASKİ CBS' )

        # If the menu does not exist, create it!
        if not self.menuu:
            self.menuu = QMenu( '&BASKİ CBS', self.iface.mainWindow().menuBar() )
            actions = self.iface.mainWindow().menuBar().actions()
            lastAction = actions[-1]
            self.iface.mainWindow().menuBar().insertMenu( lastAction, self.menuu )
        
        self.menuuu = self.iface.mainWindow().findChild( QMenu, 'Nokta Kontrolü' )
   
        #  Altmenu ekle
        if not self.menuuu:
            self.action = QAction(QIcon(':/plugins/nokta_kontrol/nokta.png'),"Nokta Kontrolü", self.iface.mainWindow())
            self.action.triggered.connect(self.run)
            self.menuu.addAction(self.action)
        
        
        
        
        
        self.loadVectors()       
        self.dlg.mMapLayerComboBox.currentIndexChanged.connect(self.layer_change)
        self.dlg.ButonNoktaKontrol.clicked.connect(self.Nokta_Kontrol)
           
      
   
    # Combobox'a Layer Adlarını Yükleme 
    def loadVectors(self):
        self.dlg.mMapLayerComboBox.clear
        layers = QgsProject.instance().layerTreeRoot().layerOrder()
        layer_list= []
        for layer in layers:
              layer_list.append(layer.name())
        
        self.dlg.mMapLayerComboBox.addItems(layer_list)
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
        
   

        
       
    # Comboboz tan layerAdı Değiştiğinde
    def layer_change(self):
        layer2 = self.dlg.mMapLayerComboBox.currentLayer() 
        layer = QgsProject.instance().mapLayersByName(layer2.name())[0]
       # self.dlg.line1.setText(layer.name())
   
    # İki nokta arası mesafe hesaplama
    def distance(x1,y1,x2,y2,self):
        import math
        dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
        return dist
    
    def Nokta_Kontrol(self):
       #  İşlem yapılacak katman ve yeni oluşacak Katman için Tanımlamalar  
          from qgis.gui import QgsMessageBar
          layer2 = self.dlg.mMapLayerComboBox.currentLayer() 
          self.dlg.line1.setText(str(layer2))
          if layer2 is None:
              self.iface.messageBar().pushMessage( "İşlem yapılacak katman seçilmedi." )
              return None, None 
          layer = QgsProject.instance().mapLayersByName(layer2.name())[0]
          feature = layer.getFeatures
          iter = layer.getFeatures()
          provider = layer.dataProvider()
          spIndex = QgsSpatialIndex() #create spatial index object
          feat = QgsFeature()
          fit = provider.getFeatures() #gets all features in layer
          layerMap = QgsProject.instance().mapLayers()
          for name, layer in layerMap.items():
            if "60_cm_den_yakin_noktalar" in name:
                QgsProject.instance().removeMapLayer(layer.id())
          
          layer1 = QgsVectorLayer('Point?crs=epsg:5253', '60_cm_den_yakin_noktalar' , 'memory')
          provider2 = layer1.dataProvider()
          nokta =0
        # Yeni field ekleme
          provider2.addAttributes([QgsField("Layer_ID",  QVariant.Int), QgsField("layername", QVariant.String)])
          
        # Har nokta için yakın komşu bulma  
          for feature in iter:
           geom = feature.geometry()
           pt1= geom.asPoint()
           x1=pt1.x()
           y1= pt1.y()
           while fit.nextFeature(feat):
             spIndex.insertFeature(feat)
           nearestIds = spIndex.nearestNeighbor(pt1,2)
           featureId = nearestIds[1]
           fit2 = layer.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
           ftr = QgsFeature()
           fit2.nextFeature(ftr)
           pt2= ftr.geometry().asPoint()
        
           x2=pt2.x()
           y2= pt2.y()
           dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
 
           mesafe= dist
 
        #  İki nokta arası 0.60 cm'den küçük ise;   
           if dist < 0.6:
             nokta = nokta + 1
             point = QgsPointXY((pt1))
             feat = QgsFeature()
             feat.setGeometry(QgsGeometry.fromPointXY(point))
         #    if feature['ID'] is None:
         #      feat['Layer_ID']=feature['ID']
         #    if not feature['layer']:
         #      feat['layername'] = Layer2.name()
         #    else:  
         #      feat['layername']=feature['layer']
             provider2.addFeatures([feat])
            
        # Sonuç tabına bilgi yazma
          self.dlg.textlog.setText( " 60 cm'den yakın " + str(nokta) + " adet nokta tespit edildi.\n\n " + "0.60_yakin adlı katman oluşturuldu" )
        
        # QGIS mesaj çubuğu ( Info, Warning, Critical, Success)
          self.iface.messageBar().pushMessage("Bilgi", " 60 cm'den yakın " + str(nokta) + " adet nokta tespit edildi.\n\n ", level=Qgis.Info)    
      
        # Değişiklikleri Katmana Kaydet 
          layer1.updateExtents()
        
        # Oluşan Katmanı Katmanlar paneline ekleyin
          QgsProject.instance().addMapLayers([layer1])
          
          layer2=[]
          
    # Dosyaları Seçme
    def openVector(self):
        inFile= str(QFileDialog.getOpenFileName(caption="Shape Dosyası Seç",
                                                filter="Shape Files (*.shp)")[0])
        if inFile is not None:
            self.iface.addVectorLayer(inFile, str.split(os.path.basename(inFile),".")[0],
                                      "ogr")
            self.loadVectors()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CBS Yakın Nokta Kontrolu'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        
        
 
       # This connects the function to the layer combobox when changed
       
        